#!/bin/bash
#
# Setup:

#
# Usage:
#       farmoutRandomSeedJobs <jobName> <nEvents> <nEventsPerJob> <CMSSW Version> <config file>
#
#  Example: farmoutCmsRunJobs blah 1000000 100 ~/CMSSW_1_2_0 /path/to/my.cfg
#
# The config file may refer to the following macros, which are automatically
# inserted by this script:
#
# $randomNumber
# $randomNumberN where N is any unique number
# $nEventsPerJob
# $outputFileName

# Initialize default settings:

# for storing output
SRM_SERVER=srm://cmssrm.hep.wisc.edu:8443
PNFS_HOME=/pnfs/hep.wisc.edu/store/user/$USER

SRM_HOME=${SRM_SERVER}${PNFS_HOME}

SITE_REQUIREMENTS='TARGET.HasAFS_OSG =?= True && TARGET.OSRedHatRelease =!= "Scientific Linux SL Release 3.0.4 (SL)"'
DISK_REQUIREMENTS=2000
MEMORY_REQUIREMENTS=900
MIN_PROXY_HOURS=24

# special exit status to force job to leave the queue
FAIL_JOB=42

scratch_dir="/data"
if ! [ -d $scratch_dir ]; then
  scratch_dir="/scratch"
fi
if ! [ -d $scratch_dir ]; then
  scratch_dir="/tmp"
fi
SUBMIT_HOME=${scratch_dir}/$USER

logerror() {
  echo 2>&1 "$@"
}

die() {
  if [ $# -gt 0 ]; then
    logerror
    logerror "$@"
  fi
  exit 1
}

outputFileExists() {
  fname=$1

  #Strip off srm://hostname:8443 to get raw pnfs path.
  local_fname=${fname#srm://*:8443}

  if [ -f "$local_fname" ]; then
    return 0
  fi
  return 1
}

realpath() {
  if ! [ -a "$1" ]; then
    echo "$1"
  fi
  readlink -f $1
}

check_proxy() {
  hours=$1
  proxy=$2
  if ! [ -f "$proxy" ]; then
    logerror
    logerror "NOTE: No grid proxy found.  (Expecting to find it here: $proxy.)"
    return 1
  fi

  #Issue a warning if less than this many seconds remain:
  min_proxy_lifetime=$((3600*$hours))

  seconds_left="`voms-proxy-info --timeleft --file=$proxy 2>/dev/null`"

  if [ "$seconds_left" = "" ]; then
    echo "WARNING: cannot find time remaining for grid proxy."
    voms-proxy-info -all -path $proxy
    return 0
  fi
  if [ "$seconds_left" -lt "$min_proxy_lifetime" ]; then
    logerror
    logerror "NOTE: grid proxy is about to expire:"
    logerror "voms-proxy-info"
    voms-proxy-info --file=$proxy
    return 1
  fi

}

PrintUsage() {
  echo "USAGE: farmoutRandomSeedJobs [options] <jobName> <events> <events-per-job> <CMSSW Path> <config files>"
  echo ""
  echo "OPTIONS:"
  echo "  --output-dir=${SRM_HOME}/<jobName>"
  echo "  --submit-dir=${SUBMIT_HOME}/<jobName>"
  echo "  --no-submit"
  echo "  --skip-existing-output  (do not create job if output file exists)"
  echo "  --skip-existing-jobs    (do not create job if already created)"
  echo "  --memory-requirements=$MEMORY_REQUIREMENTS (megabytes)"
  echo "  --disk-requirements=$DISK_REQUIREMENTS  (megabytes)"
  echo "  --site-requirements=$SITE_REQUIREMENTS"
  echo "  --save-failed-datafiles  (save root file from failed cmsRun job)"
  echo "                           (in <output-dir>-cmsRun-failed)"
  echo "  --quick-test             (require low latency scheduling)"
  echo "  --extra-inputs=file1,file2,...  (e.g. parameter files)"
  echo "  --accounting-group=cms_name  (username to use for fair-sharing)"
  echo ""
  exit 2
}

OPTS=`getopt -o "h" -l "help,output-dir:,submit-dir:,no-submit,skip-existing-output,skip-existing-jobs,disk-requirements:,memory-requirements:,save-failed-datafiles,site-requirements:,quick-test,extra-inputs:,accounting-group:" -- "$@"`
if [ $? -ne 0 ]; then PrintUsage; fi

eval set -- "$OPTS"

ACCOUNTING_GROUP=
NO_SUBMIT=
OUTPUT_DIR=
SUBMIT_DIR=
SKIP_EXISTING_OUTPUT=
SKIP_EXISTING_JOBS=
SAVE_FAILED_DATAFILES=
CFG_EXTENSION=
QUICK_TEST=
EXTRA_INPUTS=

while [ ! -z "$1" ]
do
  case "$1" in
    -h) PrintUsage;;
    --help) PrintUsage;;
    --no-submit) NO_SUBMIT=1;;
    --output-dir) shift; OUTPUT_DIR=$1;;
    --submit-dir) shift; SUBMIT_DIR=$1;;
    --skip-existing-output) SKIP_EXISTING_OUTPUT=1;;
    --skip-existing-jobs) SKIP_EXISTING_JOBS=1;;
    --disk-requirements) shift; DISK_REQUIREMENTS=$1;;
    --memory-requirements) shift; MEMORY_REQUIREMENTS=$1;;
    --save-failed-datafiles) SAVE_FAILED_DATAFILES=1;;
    --site-requirements) shift; SITE_REQUIREMENTS="$1";;
    --quick-test) QUICK_TEST=1;;
    --extra-inputs) shift; EXTRA_INPUTS="$1";;
    --accounting-group) shift; ACCOUNTING_GROUP="+AccountingGroup=\"$1\"";;
    --) shift; break;;
    *) die "Unexpected option $1";;
  esac
  shift
done

if [ "$#" -lt 5 ]; then PrintUsage; fi

# Check for some required utilities
for exe in scramv1 condor_submit cmsRun.sh readlink voms-proxy-info; do
  if ! which $exe >& /dev/null; then
    die "Cannot find $exe in PATH.  Your environment is not correctly set up."
  fi
done

# Additional command-line arguments

jobName=$1
declare -i nEvents=$2
declare -i nEventsPerJob=$3
CMSSW_HOME=`realpath $4`
configTemplate=`realpath $5`

shift 5
chainedConfigs=""
while [ "$1" != "" ]; do
   cfg=`realpath $1`
   chainedConfigs="$chainedConfigs $cfg"
   shift
done

#       Ensure that your environment is correct

if ! [ -d "$CMSSW_HOME" ]; then
  die "No such directory: $CMSSW_HOME"
fi

# randomize
if [ "$RANDOM" = "" ]; then
  die "\$RANDOM is not working.  Are you using bash?"
fi
RANDOM=`date +%N | cut -c 1-6 | sed 's|^0*||'`

proxy=${X509_USER_PROXY:-/tmp/x509up_u$UID}

if [ "$NO_SUBMIT" != 1 ] && ! check_proxy $MIN_PROXY_HOURS $proxy; then
  logerror
  logerror "Either rerun this command with --no-submit or create a new grid proxy"
  logerror "and rerun this command.  Example of how to create a grid proxy:"
  logerror
  logerror "voms-proxy-init --voms=cms --hours=48"
  die
fi

if [ "$EXTRA_INPUTS" != "" ]; then
  for file in ${EXTRA_INPUTS//,/ }; do
    if ! [ -a $file ]; then
      logerror "ERROR: Cannot find file specified in --extra-inputs: $file"
      die
    fi
  done
fi

# Check the config template

if [ "$configTemplate" = "" ]; then
  die "You must specify a cfg template."
fi

CFG_EXTENSION="${configTemplate/*./}"
if [ "$CFG_EXTENSION" != "py" ] && [ "$CFG_EXTENSION" != "cfg" ]; then
  die "cfg template must end in .py or .cfg"
fi

for macro in \$randomNumber \$nEventsPerJob \$outputFileName; do
  if ! grep -F -q $macro $configTemplate; then
    die "$macro must appear on the configuration template.  I can't find it in $configTemplate, so I am going to abort.  If you know what you are doing and this macro really isn't needed, simply put this macro in a comment in your template so that I see it and conclude that all is well."
  fi
done

# Check the chained config templates, if any
for cfg in ${chainedConfigs}; do
  ext="${cfg/*./}"
  if [ "$ext" != "$CFG_EXTENSION" ]; then
    die "The chained config template $cfg is expected to be the same type of config file as the base config file (${CFG_EXTENSION})."
  fi
  for macro in \$inputFileNames \$outputFileName; do
    if ! grep -F -q $macro $cfg; then
      die "$macro must appear in the chained configuration template.  I can't find it in $cfg"
    fi
  done
done

# Note: reverse sort order is _very_ important, or the search/replace
# operation will do the wrong thing on longer macros having a common
# prefix with a shorter macro.
randomMacros=`grep -o '\$randomNumber[0-9]*' $configTemplate | sort -r | uniq`

#
# Environment setup
#
originalDir=`pwd`
PATH=$PATH:$originalDir
export PATH
cd $CMSSW_HOME || die "Failed to cd to $CMSSW_HOME."
eval `scramv1 runtime -sh`

if [ "$?" != "0" ]; then
  die "Failed to initialize CMSSW environment with scram in $CMSSW_HOME."
fi

OUTPUT_DIR=${OUTPUT_DIR:-${SRM_HOME}/$jobName}
SUBMIT_DIR=${SUBMIT_DIR:-${SUBMIT_HOME}/$jobName}
submitFile=$SUBMIT_DIR/submit
farmoutLogFile=$SUBMIT_DIR/farmoutRandomSeedJobs.log

if [ -d "$SUBMIT_DIR" ] && [ "$SKIP_EXISTING_JOBS" != "1" ]; then
  logerror
  logerror "Error: Submit directory already exists: $SUBMIT_DIR"
  logerror
  logerror "You must either remove it, or specify --skip-existing-jobs, or"
  logerror "specify a different job name or submission directory with --submit-dir"
  die
fi

mkdir -p $SUBMIT_DIR
cd $SUBMIT_DIR || die "Failed to create directory $SUBMIT_DIR"


#
# Job specification
#
Executable=`which cmsRun.sh`

if [ "$QUICK_TEST" != "" ]; then
  IS_FAST_QUEUE_JOB="+IsFastQueueJob = True"
  SITE_REQUIREMENTS="${SITE_REQUIREMENTS} && IsFastQueueSlot =?= True"
fi

#
# CMS Dashboard parameters
#
FARMOUT_DASHBOARD_REPORTER=`which farmout_dashboard.sh 2>/dev/null`
if [ "$FARMOUT_DASHBOARD_REPORTER" = "" ]; then
   echo "No farmout_dashboard.sh found, so no reporting to the CMS dashboard."
fi
if [ "$CMS_DASHBOARD_REPORTER" = "" ]; then
   echo "No CMS_DASHBOARD_REPORTER defined, so no reporting to the CMS dashboard."
fi
dboard="
dboard_taskId=${USER}-`hostname -f`-\$(Cluster)
dboard_jobId=\$(Process)
dboard_sid=\$\$([GlobalJobId])
dboard_application=`basename ${CMSSW_HOME}`
dboard_exe=cmsRun
dboard_tool=farmout
dboard_scheduler=local-condor
dboard_taskType=simulation
dboard_broker=local-condor-`hostname -f`
dboard_user=${USER}
dboard_SyncCE=${CMS_DASHBOARD_LOCAL_CE}
CMS_DASHBOARD_REPORTER=${CMS_DASHBOARD_REPORTER}
FARMOUT_DASHBOARD_REPORTER=${FARMOUT_DASHBOARD_REPORTER}
"
# convert newlines to spaces
dboard="`echo $dboard`"

if [ "$SAVE_FAILED_DATAFILES" != "" ]; then
  #cmsRun.sh checks for this in the environment
  save_failed_datafiles_env="SAVE_FAILED_DATAFILES=1"
fi

# First put all the submit file commands that are the same for all jobs.
    cat <<EOF > $submitFile
X509UserProxy        = ${proxy}
Universe             = vanilla
Executable           = $Executable
GetEnv               = true
Environment          = "${dboard} ${save_failed_datafiles_env}"
Copy_To_Spool        = false
Notification         = never
WhenToTransferOutput = On_Exit
on_exit_remove       = (ExitBySignal == FALSE && (ExitCode == 0 || (ExitCode == ${FAIL_JOB} && JobRunCount>3)))
ImageSize            = $(($MEMORY_REQUIREMENTS*1000))
+DiskUsage           = $(($DISK_REQUIREMENTS*1000))
${IS_FAST_QUEUE_JOB}
Requirements         = ${SITE_REQUIREMENTS}
${ACCOUNTING_GROUP}
EOF


#
# Starting values for the job loop
#
declare -i nEventsSubmitted=0
declare -i job=0

final_step=1
for template in $chainedConfigs; do
  let final_step=$final_step+1
done

#
# Loop over jobs
#
while (( $nEvents > $nEventsSubmitted )); do
#
# Name the files
#
    jobtag=$jobName-`printf "%4.4d" $job`

    let job=$job+1
    if [ "$SKIP_EXISTING_JOBS" = "1" ] && [ -d $jobtag ]; then
      continue
    fi

    conlog=$jobtag.log
    stdout=$jobtag.out
    stderr=$jobtag.err
    jobcfg=$jobtag.$CFG_EXTENSION
    outputFileName=$jobtag.root

    if [ "$SKIP_EXISTING_OUTPUT" = "1" ]; then
      # Check for existing output file
      if outputFileExists $OUTPUT_DIR/$outputFileName; then
        continue
      fi
    fi

    step1_outputFileName=$outputFileName
    if [ "$chainedConfigs" != "" ]; then
      jobcfg=$jobtag-step1.$CFG_EXTENSION
      step1_outputFileName=intermediate/$jobtag-step1.root
    fi

    randomSed=""
    # Note: we rely here upon the reverse sort order of the randomMacros
    # in order to assure proper treatment of macros that share a common
    # prefix (e.g. randomNumber11 should be replaced before randomNumber1)
    for randomMacro in $randomMacros; do
        # ${RANDOM} is 15-bit
        # prepend the job number to it to make sure no two jobs in
        # a batch have the same seed
	# The modulo 900000000 is to avoid going over the limit
	# for maximum seed value in HepJamesRandom.
        randomNumber=$(( (${RANDOM} + (${job}<<15)) % 900000000 ))

        randomSed="${randomSed}s/\\${randomMacro}/${randomNumber}/g;"
    done

#
# Create the job subdirectory
#
    mkdir -p $jobtag || die "Failed to mkdir $jobtag"

#
# Prepare job configuration file
#

    sed < $configTemplate \
      "${randomSed}
       s|\\\$nEventsPerJob|$nEventsPerJob|g;
       s|\\\$outputFileName|$step1_outputFileName|g" > $jobtag/$jobcfg


    jobinputfiles="$jobcfg"
    jobcfgs="$jobcfg"

    last_outputFileName=$step1_outputFileName
    step=2
    for template in $chainedConfigs; do
      step_cfg=$jobtag-step${step}.$CFG_EXTENSION
      jobcfgs="$jobcfgs,$step_cfg"
      step_outputFileName=intermediate/$jobtag-step${step}.root
      if [ $step -eq $final_step ]; then
        step_outputFileName=$outputFileName
      fi
      jobinputfiles="$jobinputfiles,$step_cfg"

      step_inputFileNames="\"file:${last_outputFileName}\""
      sed < $template \
          "s|\\\$inputFileNames|$step_inputFileNames|g;
           s|\\\$outputFileName|$step_outputFileName|g" > $jobtag/$step_cfg


      last_outputFileName=$step_outputFileName
      let step=$step+1
    done

    if [ "$EXTRA_INPUTS" != "" ]; then
      jobinputfiles="$jobinputfiles,$EXTRA_INPUTS"
    fi

#
# Prepare condor submit commands for the job
#
    cat <<EOF >> $submitFile

InitialDir           = $jobtag
Arguments            = $jobcfgs $outputFileName $OUTPUT_DIR
Transfer_Input_Files = $jobinputfiles
output               = $stdout
error                = $stderr
Log                  = $conlog
Queue
EOF
#
# Prepare for the next job
#
    let nEventsSubmitted=$nEventsSubmitted+$nEventsPerJob

done


#
# Submit the jobs
#
if [ -z "$NO_SUBMIT" ]; then
    # The job is messed up if X509_USER_PROXY is defined, because then
    # Condor doesn't override this value to point to the actual proxy
    # location on the execution node.
    unset X509_USER_PROXY

    condor_submit $submitFile >> $farmoutLogFile
    cat $farmoutLogFile
else
    echo "Submit file $submitFile has been created but not submitted."
fi

echo "Jobs for $nEventsSubmitted events of $jobName are created in $SUBMIT_DIR"

echo ""
echo "Your jobs should show up in ~6 minutes"
echo "at the NEW job monitoring web page :"
echo "    http://www.hep.wisc.edu/cms/comp/jobs/"

