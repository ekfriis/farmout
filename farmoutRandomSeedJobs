#!/bin/bash
#
# Setup:

#
# Usage:
#       farmoutRandomSeedJobs <jobName> <nEvents> <nEventsPerJob> <CMSSW Version> <config file>
#       Expects a cfi called IOMC/GeneratorInterface/data/PythiaSource<jobName>.cfi to exist
#       in the CMSSW area that you are using.
#  Example: farmoutCmsRunJobs blah 1000000 100 ~/CMSSW_1_2_0 /path/to/my.cfg
#
# The config file may refer to the following macros, which are automatically
# inserted by this script:
#
# $randomNumber
# $randomNumber2
# $nEventsPerJob
# $outputFileName

# Initialize default settings:

PNFS_HOME=/pnfs/hep.wisc.edu/data5/uscms01/$USER
SRM_SERVER=srm://cmssrm.hep.wisc.edu:8443
DCAP_SERVER=dcap://cmsdcap.hep.wisc.edu:22125
SRM_HOME=${SRM_SERVER}/${PNFS_HOME}
DCAP_HOME=${DCAP_SERVER}${PNFS_HOME}

scratch_dir="/data"
if ! [ -d $scratch_dir ]; then
  scratch_dir="/scratch"
fi
if ! [ -d $scratch_dir ]; then
  scratch_dir="/tmp"
fi
SUBMIT_HOME=${scratch_dir}/$USER

die() {
  echo 2>&1 $1
  exit 1
}

outputFileExists() {
  fname=$1

  #Strip off srm://hostname:8443 to get raw pnfs path.
  local_fname=${fname#srm://*:8443}

  if [ -f "$local_fname" ]; then
    return 0
  fi
  return 1
}

PrintUsage() {
  echo "USAGE: farmoutRandomSeedJobs [options] <jobName> <events> <events-per-job> <CMSSW Path> <config file>"
  echo ""
  echo "OPTIONS:"
  echo "  --output-dir=${SRM_HOME}/<jobName>"
  echo "  --submit-dir=${SUBMIT_HOME}/<jobName>"
  echo "  --no-submit"
  echo "  --skip-existing-output  (do not create job if output file exists)"
  echo "  --skip-existing-jobs    (do not create job if already created)"
  echo ""
  exit 2
}

OPTS=`getopt -o "h" -l "help,output-dir:,submit-dir:,no-submit,skip-existing-output,skip-existing-jobs" -- "$@"`
if [ $? -ne 0 ]; then PrintUsage; fi

eval set -- "$OPTS"

NO_SUBMIT=
OUTPUT_DIR=
SUBMIT_DIR=
SKIP_EXISTING_OUTPUT=
SKIP_EXISTING_JOBS=

while [ ! -z "$1" ]
do
  case "$1" in
    -h) PrintUsage;;
    --help) PrintUsage;;
    --no-submit) NO_SUBMIT=1;;
    --output-dir) shift; OUTPUT_DIR=$1;;
    --submit-dir) shift; SUBMIT_DIR=$1;;
    --skip-existing-output) SKIP_EXISTING_OUTPUT=1;;
    --skip-existing-jobs) SKIP_EXISTING_JOBS=1;;
    --) shift; break;;
    *) echo "Unexpected option $1"; PrintUsage;;
  esac
  shift
done

if [ "$#" -ne 5 ]; then PrintUsage; fi

# Check for some required utilities
for exe in scramv1 condor_submit cmsRun.sh realpath; do
  if ! which $exe >& /dev/null; then
    echo "Cannot find $exe in PATH.  Your environment is not correctly set up."
    exit 1
  fi
done

# Additional command-line arguments

jobName=$1
declare -i nEvents=$2
declare -i nEventsPerJob=$3
CMSSW_HOME=`realpath $4`
configTemplate=`realpath $5`

#       Ensure that your environment is correct

if ! [ -d "$CMSSW_HOME" ]; then
  echo "No such directory: $CMSSW_HOME"
  exit 1
fi

# Check the config template

for macro in \$randomNumber \$nEventsPerJob \$outputFileName; do
  if ! grep -F -q $macro $configTemplate; then
    echo "$macro must appear on the configuration template.  I can't find it in $configTemplate"
    exit 1
  fi
done

#
# Environment setup
#
originalDir=`pwd`
PATH=$PATH:$originalDir
export PATH
cd $CMSSW_HOME || die "Failed to cd to $CMSSW_HOME."
eval `scramv1 runtime -sh`

if [ "$?" != "0" ]; then
  echo "Failed to initialize CMSSW environment with scram in $CMSSW_HOME."
  exit 1
fi

OUTPUT_DIR=${OUTPUT_DIR:-${SRM_HOME}/$jobName}
SUBMIT_DIR=${SUBMIT_DIR:-${SUBMIT_HOME}/$jobName}

if [ -d "$SUBMIT_DIR" ] && [ "$SKIP_EXISTING_JOBS" != "1" ]; then
  echo "Error: Submit directory already exists: $SUBMIT_DIR"
  echo "You must either remove it, or specify --skip-existing-jobs, or"
  echo "specify a different job name or submission directory with --submit-dir"
  exit 1
fi

mkdir -p $SUBMIT_DIR
cd $SUBMIT_DIR || die "Failed to create directory $SUBMIT_DIR"


#
# Job specification
#
Executable=`which cmsRun.sh`
#
# Starting values for the job loop
#
declare -i nEventsSubmitted=0
declare -i job=0
#
# Loop over jobs
#
while (( $nEvents > $nEventsSubmitted )); do
    cd $SUBMIT_DIR   || die "Failed to cd to $SUBMIT_DIR"
#
# Name the files
#
    jobtag=`echo $jobName $job | awk '{printf("%s-%4.4d", $1, $2)}'`
    consub=`echo $jobName $job | awk '{printf("%s-%4.4d.sub", $1, $2)}'`
    conlog=`echo $jobName $job | awk '{printf("%s-%4.4d.log", $1, $2)}'`
    stdout=`echo $jobName $job | awk '{printf("%s-%4.4d.out", $1, $2)}'`
    stderr=`echo $jobName $job | awk '{printf("%s-%4.4d.err", $1, $2)}'`
    jobcfg=`echo $jobName $job | awk '{printf("%s-%4.4d.cfg", $1, $2)}'`
    outputFileName=`echo $jobName $job | awk '{printf("%s-%4.4d.root", $1, $2)}'`
    randomNumber=`date +%N%S | cut -c 1-6,10- | sed 's|^0*||'`
    randomNumber2=`date +%N%S | cut -c 2-6,9- | sed 's|^0*||'`

    let job=$job+1

    if [ "$SKIP_EXISTING_JOBS" = "1" ] && [ -d $jobtag ]; then
      continue
    fi

    if [ "$SKIP_EXISTING_OUTPUT" = "1" ]; then
      # Check for existing output file
      if outputFileExists $OUTPUT_DIR/$outputFileName; then
        continue
      fi
    fi


#
# Create and set to the job subdirectory
#
    mkdir -p $jobtag || die "Failed to mkdir $jobtag"
    cd $jobtag       || die "Failed to cd to $jobtag"
#
# Prepare job configuration file
#

sed "s|\\\$randomNumber|$randomNumber|g" < $configTemplate |
sed "s|\\\$randomNumber2|$randomNumber2|g" |
sed "s|\\\$nEventsPerJob|$nEventsPerJob|g" |
sed "s|\\\$outputFileName|$outputFileName|g" > $jobcfg

#
# Prepare condor submit file for the job
#
    cat <<EOF > $consub
X509UserProxy        = /tmp/x509up_u$UID
Universe             = vanilla
Executable           = $Executable
Arguments            = $jobcfg `basename $outputFileName` $OUTPUT_DIR
GetEnv               = true
Transfer_Input_Files = $jobcfg
output               = $stdout
error                = $stderr
Log                  = $conlog
Copy_To_Spool        = false
Notification         = never
WhenToTransferOutput = On_Exit
on_exit_remove       = (ExitBySignal == FALSE && ExitCode == 0)
ImageSize            = 900000
+DiskUsage           = 2000000
Requirements = TARGET.HasAFS_OSG =?= True && TARGET.OSRedHatRelease =!= "Scientific Linux SL Release 3.0.4 (SL)"
Queue
EOF
#
# Prepare for the next job
#
    let nEventsSubmitted=$nEventsSubmitted+$nEventsPerJob

#
# Submit the job
#
    if [ -z "$NO_SUBMIT" ]; then
        condor_submit $consub
    else
        echo "Submit file $consub has been created but not submitted."
    fi

done

echo "Jobs for $nEventsSubmitted events of $jobName are created in $SUBMIT_DIR"
