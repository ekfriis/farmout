#!/usr/bin/env python

import CondorUserLog as ULog
import sys
import getopt
import os
import re

def FindLogs(paths,match_logs,exclude_logs,logs=None):
	if logs == None:
		logs = []

	for path in paths:
		basename = os.path.basename(path)
		if os.path.isfile(path):
			if match_logs.match(basename) and not exclude_logs.match(basename):
				logs.append(path)
		elif os.path.islink(path):
			# avoid possibility of link loops by not following links to dirs
			pass
		elif os.path.isdir(path):
			contents = [ os.path.join(path,x) for x in os.listdir(path) ]
			FindLogs(contents,match_logs,exclude_logs,logs)

	return logs

def AnalyzeLogs(logs):
	ulog_stats = ULog.CondorUserLogStats()

	for log in logs:
		ulog = ULog.ReadCondorUserLog(log)
		ulog_stats.add(ulog)

	print ulog_stats

def PrintUsage():
	sys.stderr.write("""
USAGE: analyze_condor_userlogs [OPTIONS] <user_log_dir>

OPTIONS:
--match-logs=.*\\.log
     (regular expression matching log files)
--exclude-logs=((report)|(farmoutRandomSeedJobs)|(farmoutAnalysisJobs)).log
     (regular expression of matched files to ignore)

""")

long_options = [
	"help",
	"match-logs=",
	"exclude-logs=",
]

options,args = getopt.getopt(sys.argv[1:],"h",long_options)

# these defaults work well for farmout logs
match_logs = re.compile(".*\\.log")
exclude_logs = re.compile("((report)|(farmoutRandomSeedJobs)|(farmoutAnalysisJobs)).log")

for option,value in options:
	if option == "-h" or option == "--help":
		PrintUsage()
		sys.exit(0)
	if option == "--match-logs":
		match_logs=re.compile(value)
	if option == "--exclude-logs":
		exclude_logs=re.compile(value)

logs = FindLogs(args,match_logs,exclude_logs)

AnalyzeLogs(logs)
