#!/bin/bash
#
# Essentially this runs condor_q <screen name>
# once every minute and stores that in a log file.
# Then runs a script to create a plot of that log file.
#
# Michael Anderson
# May 19, 2008
##################################################


##################################################
# Variables
#
# location to store the log file of jobs running
logFile="/afs/hep.wisc.edu/home/$USER/jobMonitor.log"

# max length of time to run this monitor (in minutes)
# BUT KNOW: the monitor will stop when jobs on queue = 0
#           OR when time running > maxTimeToMonitor
maxTimeToMonitor=7200
##################################################


##################################################
# See if the log file already exists.
# If true, this means jobMonitor already ran, 
# which is ok, but we need to check if it is
# still running so as not to run another instance.
if [ -f "$logFile" ]; then
 # Logfile exists, check to see if jobMonitor is already running
 lastPID=`head -1 $logFile | awk '{print $2}'`
 checkRunning=`ps -p $lastPID | grep $lastPID`
 if [ "$checkRunning"  ]; then
  #jobMonitor is already running, so don't run again
  exit
 fi
fi
##################################################


##################################################
# Make the user's web dir if it doesn't exist
mkdir -p /afs/hep.wisc.edu/home/$USER/www

# Create new log file
echo "#PID $$" > $logFile
echo "#Log of jobs running on condor" >> $logFile
echo "#Started: "`date` >> $logFile
echo "MonthDayHourMin Total Idle Running Held" >> $logFile
##################################################


##################################################
# Run for a certain number of minutes
for ((i=0;i<=$maxTimeToMonitor;i+=1)); do 

  # Update the log file containing jobs running, etc...
  # This will look something like: 
  #   "10 jobs; 1 idle, 8 running, 1 held"
  jobString="`condor_q $USER | tail -1`"
  totalJobs=`echo $jobString | awk '{print $1}'`
  # This writes a string to the log file that looks like
  #   <month>-<day>-<hour>:<min> <total> <idle> <running> <held>
  # example: "15:36 10 1 8 1"
  echo `date +%m-%d-%H:%M`" "`echo $jobString | awk '{print $1" "$3" "$5" "$7}'` >> $logFile

  # Run the plot updater every 2 minutes
  if [ $((i % 2)) -eq 1 ]; then

    /cms/cmsprod/bin/updateJobMonitorGraph.pl

    # If there are no jobs left, quit
    if [ "$totalJobs" -eq 0 ]; then
      exit
    fi

    # It takes a little bit for the updater to finish, 
    # so sleep less than normal.
    sleep 59

  else
    # Sleep for 60 seconds
    sleep 60
  fi

done
##################################################
