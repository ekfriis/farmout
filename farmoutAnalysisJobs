#!/bin/bash
#
# Setup:

#
# Usage:
#       farmoutAnalysisJobs <jobName> <CMSSW Version> <config file>
#
# The config file should refer to the following macros, which are automatically
# inserted by this script:
#
# $inputFileName      ==>  Will be replaced by one of the files in the dataset location
# $outputFileName     ==>  Will be replaced by the $inputFileName-output.root
#
# Job parameters
#

PNFS_HOME=/pnfs/hep.wisc.edu/data5/uscms01/$USER
SRM_SERVER=srm://cmssrm.hep.wisc.edu:8443
SRM_HOME=${SRM_SERVER}/${PNFS_HOME}

PrintUsage() {
  echo "USAGE: farmoutAnalysisJobs [options] <jobName> <CMSSW Version> <config file>"
  echo ""
  echo "OPTIONS:"
  echo "  --output-dir=${SRM_HOME}/"
  echo "  --no-submit"
  echo "  --job-limit=N    (limit the number of jobs that are created)"
  exit 2
}

basename() {
  # This shell function is faster than calling /bin/basename
  path=$1
  suffix=$2
  path=${path##*/}  # get everything after the final '/'
  if [ ! -z $suffix ]; then
    path=${path%$suffix}
  fi
  echo $path
}

OPTS=`getopt -o "h" -l "help,no-submit,job-limit:" -- "$@"`
if [ $? -ne 0 ]; then PrintUsage; fi

eval set -- "$OPTS"

while [ ! -z "$1" ]
do
  case "$1" in
    -h) PrintUsage;;
    --help) PrintUsage;;
    --no-submit) NO_SUBMIT=1;;
    --job-limit) shift; JOB_LIMIT=$1;;
    --) shift; break;;
    *) echo "Unexpected option $1"; PrintUsage;;
  esac
  shift
done

if [ -z "$1" ]; then PrintUsage; fi

jobName=$1
CMSSW_HOME=`realpath $2`
configTemplate=`realpath $3`

#       Ensure that your environment is correct

runName=`basename $configTemplate .cfg`
PNFS_DIR=${PNFS_HOME}/$jobName
DCAP_BASE_DIR=dcap://cmsdcap.hep.wisc.edu:22125/$PNFS_DIR
SRM_BASE_DIR=${SRM_SERVER}/$PNFS_DIR
SRM_OUTPUT_DIR=${SRM_BASE_DIR}/$runName

if ! [ -d "$CMSSW_HOME" ]; then
  echo "No such directory: $CMSSW_HOME"
  exit 1
fi

# Check the config template

for macro in \$inputFileName \$outputFileName; do
  if ! grep -F -q $macro $configTemplate; then
    echo "$macro must appear on the configuration template.  I can't find it in $configTemplate"
    exit 1
  fi
done

#
# Environment setup
#
#source /afs/hep.wisc.edu/cms/sw/osg0.4.1/setup.sh
originalDir=`pwd`
PATH=$PATH:$originalDir
export PATH
cd $CMSSW_HOME
eval `scramv1 runtime -sh`

if [ "$?" != "0" ]; then
  echo "Failed to initialize CMSSW environment with scram in $CMSSW_HOME."
  exit 1
fi

scratch_dir="/data"
if ! [ -d $scratch_dir ]; then
  scratch_dir="/scratch"
fi
if ! [ -d $scratch_dir ]; then
  scratch_dir="/tmp"
fi

runDir=$scratch_dir/$USER/$jobName-$runName
submitFile=$runDir/submit

mkdir -p $runDir
cd $runDir

#
# Job specification
#
Executable=`which cmsRun.sh`

    cat <<EOF > $submitFile
X509UserProxy        = /tmp/x509up_u$UID
Universe             = vanilla
Executable           = $Executable
GetEnv               = true
Copy_To_Spool        = false
Notification         = never
WhenToTransferOutput = On_Exit
on_exit_remove       = (ExitBySignal == FALSE && ExitStatus == 0)
Requirements = TARGET.HasAFS =?= True || TARGET.IsC2Cluster || TARGET.IsPCluster
EOF

#
# Loop over input files
#
count=0
for inputFile in $PNFS_DIR/*.root
do
    count=$(($count+1))
    if [ ! -z $JOB_LIMIT ] && [ $count -gt $JOB_LIMIT ]; then
        echo "Job limit $JOB_LIMIT reached.  Halting creation of jobs."
        break
    fi

#
# Name the files
#
    jobtag=$runName-`basename $inputFile .root`
    consub=$jobtag.sub
    conlog=$jobtag.log
    stdout=$jobtag.out
    stderr=$jobtag.err
    jobcfg=$jobtag.cfg
    inputFileName=$DCAP_BASE_DIR/`basename $inputFile`
    outputFileName=$jobtag.root
#
# Create and set to the job subdirectory
#

    cd $runDir
    mkdir -p $jobtag
    cd $jobtag

#
# Prepare job configuration file
#

sed < $configTemplate \
    "s|\\\$inputFileName|$inputFileName|g;
     s|\\\$outputFileName|$outputFileName|g" > $jobcfg

#
# Prepare condor submit file for the job
#
cat >> $submitFile <<EOF

InitialDir           = $jobtag
Arguments            = $jobcfg `basename $outputFileName` $SRM_OUTPUT_DIR
Transfer_Input_Files = $jobcfg
output               = $stdout
error                = $stderr
Log                  = $conlog
Queue
EOF
done

cd $runDir

#
# Submit the job
#
if [ -z "$NO_SUBMIT" ]; then
  condor_submit $submitFile
else
  echo "Submit file $submitFile has been created but not submitted."
fi

echo -n "Jobs for $jobName are created in "
pwd
cd $originalDir
